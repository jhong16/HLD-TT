from src.cli import TreeShell
import unittest
from src import util
import src.treeformulas

class VerificationTest(unittest.TestCase):
    def test_mark_parent_formula(self):
        print("\n\nMark Parent Test=======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("and(a,b)")
        shell.do_add_formula("a")
        shell.do_mark_parent("2 1")
        shell.do_mark_parent("1 2")
        shell.do_add_formula("and(b,a)")
        shell.do_mark_parent("3 1")
        shell.do_mark_parent("3 2")
        self.assertTrue(util.return_element_from_list(3, shell.tree.formulas).valid)

    def test_closing(self):
        print("\n\nClosing Test======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("and(a,b)")
        shell.do_add_root_formula("not(a)")
        shell.do_add_formula("a")
        shell.do_mark_parent("3 1")
        shell.do_close("2 3")

    def test_checkmark(self):
        print("\n\nCheckmark and Test======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("and(a,b)")
        shell.do_add_formula("a")
        shell.do_mark_parent("2 1")
        shell.do_checkmark("1")
        self.assertFalse(util.return_element_from_list(1, shell.tree.formulas).checkmarked)
        shell.do_add_formula("b")
        shell.do_mark_parent("3 1")
        shell.do_checkmark("1")
        self.assertTrue(util.return_element_from_list(1, shell.tree.formulas).checkmarked)

    def test_checkmark_or(self):
        print("\n\nCheckmark OR Test=======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("or(a,b)")
        shell.do_branch("1")
        shell.do_go_to("2")
        shell.do_add_formula("a")
        shell.do_mark_parent("2 1")
        shell.do_go_to("3")
        shell.do_add_formula("b")
        shell.do_mark_parent("3 1")
        shell.do_checkmark("1")
        self.assertTrue(util.return_element_from_list(1, shell.tree.formulas).checkmarked)

    def test_checkmark_or_two_layer(self):
        print("\n\nCheckmark OR Two Layer Test=======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("or(a,b)")
        shell.do_add_root_formula("or(a,b)")
        shell.do_branch("1")
        shell.do_go_to("2")
        shell.do_branch("2")
        shell.do_go_to("4")
        shell.do_add_formula("a")
        shell.do_go_to("5")
        shell.do_add_formula("b")
        shell.do_mark_parent("3 2")
        shell.do_mark_parent("4 2")
        shell.do_go_to("3")
        shell.do_branch("2")
        shell.do_go_to("6")
        shell.do_add_formula("b")
        shell.do_mark_parent("5 2")
        shell.do_go_to("7")
        shell.do_add_formula("a")
        shell.do_mark_parent("6 2")
        shell.do_checkmark("2")
        self.assertTrue(util.return_element_from_list(2, shell.tree.formulas).checkmarked)

    def test_checkmark_if(self):
        print("\n\nCheckmark if Test=======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("if(a,b)")
        shell.do_branch("1")
        shell.do_go_to("2")
        shell.do_add_formula("not(a)")
        shell.do_mark_parent("2 1")
        shell.do_go_to("3")
        shell.do_add_formula("b")
        shell.do_mark_parent("3 1")
        shell.do_checkmark("1")
        self.assertTrue(util.return_element_from_list(1, shell.tree.formulas).checkmarked)

    def test_checkmark_iff(self):
        print("\n\nCheckmark iff Test=======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("iff(a,b)")
        shell.do_branch("1")
        shell.do_go_to("2")
        shell.do_add_formula("not(a)")
        shell.do_add_formula("not(b)")
        shell.do_mark_parent("2 1")
        shell.do_mark_parent("3 1")
        shell.do_go_to("3")
        shell.do_add_formula("b")
        shell.do_add_formula("a")
        shell.do_mark_parent("4 1")
        shell.do_mark_parent("5 1")
        shell.do_checkmark("1")
        self.assertTrue(util.return_element_from_list(1, shell.tree.formulas).checkmarked)

    def test_checkmark_iff2(self):
        print("\n\nCheckmark iff Test=======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("iff(a,b)")

        shell.do_branch("")
        shell.do_go_to("2")
        shell.do_add_formula("if(a,b)")
        shell.do_add_formula("if(b,a)")
        shell.do_mark_parent("2 1")
        shell.do_mark_parent("3 1")
        shell.do_go_to("3")
        shell.do_add_formula("if(b,a)")
        shell.do_add_formula("if(a,b)")
        shell.do_mark_parent("4 1")
        shell.do_mark_parent("5 1")

        shell.do_checkmark("1")
        self.assertTrue(util.return_element_from_list(1, shell.tree.formulas).checkmarked)

    def test_all_branch_closed(self):
        print("\n\nClosing all branch Test======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("and(a,b)")
        shell.do_add_root_formula("not(a)")
        shell.do_add_formula("a")
        shell.do_mark_parent("3 1")
        shell.do_close("2 3")
        shell.do_check_all_closed("")
        self.assertTrue(shell.finish)

    def test_all_branch_closed_2(self):
        print("\n\nClosing all branch Test======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("or(a,b)")
        shell.do_add_root_formula("not(a)")
        shell.do_add_root_formula("not(b)")
        shell.do_branch("1")
        shell.do_go_to("2")
        shell.do_add_formula("a")
        shell.do_mark_parent("4 1")
        shell.do_close("4 2")
        shell.do_go_to("3")
        shell.do_add_formula("b")
        shell.do_mark_parent("5 1")
        shell.do_close("5 3")
        shell.do_checkmark("1")
        shell.do_check_all_closed("")
        self.assertTrue(shell.finish)

    def test_open_branch(self):
        print("\n\nOpen Branch Test======================================================")
        shell = TreeShell()
        shell.reset()
        shell.do_add_root_formula("or(a,b)")
        shell.do_add_root_formula("or(c,d)")
        shell.do_branch("1")
        shell.do_go_to("2")
        shell.do_add_formula("a")
        shell.do_mark_parent("3 1")
        shell.do_branch("2")
        shell.do_go_to("4")
        shell.do_add_formula("c")
        shell.do_mark_parent("4 2")
        shell.do_mark_open("")
        self.assertTrue(shell.finish)

if __name__ == "__main__":
    unittest.main()